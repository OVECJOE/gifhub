// Prisma schema for GifHub
// Database: PostgreSQL (Supabase)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  repositories  Repository[]

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Repository {
  id          String  @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(false)
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  views       Int     @default(0)
  gifs        Gif[]

  // many-to-many with Tag via implicit relation table
  tags        Tag[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("repositories")
}

model Gif {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  fileSize     Int
  duration     Float
  width        Int
  height       Int
  downloads    Int      @default(0)
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  createdAt    DateTime  @default(now())

  @@map("gifs")
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  repositories Repository[]

  @@map("tags")
}
